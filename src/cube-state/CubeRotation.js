class CubeRotation {
  constructor(rotationIndex) {
    this.rotationIndex = rotationIndex % CubeRotation.numRotations;
  }

  multiply(rotationIndex) {
    return CubeRotation.multiply(this.rotationIndex, rotationIndex);
  }

  euler() {
    return CubeRotation.eulerCubeRotations[this.rotationIndex];
  }

  toString() {
    return CubeRotation.greekAlphabet[this.rotationIndex];
  }

  static multiply(rotation1, rotation2) {
    return CubeRotation.rotationProductTable[rotation1][rotation2];
  }

  static default() {
    return CubeRotation.eulerCubeRotations[0];
  }
  static numRotations = 24;

  static eulerCubeRotations = [
    [0, 0, 0],
    [0, 0, Math.PI / 2],
    [0, 0, Math.PI],
    [0, 0, (3 * Math.PI) / 2],
    [0, Math.PI / 2, 0],
    [0, Math.PI / 2, Math.PI / 2],
    [0, Math.PI / 2, Math.PI],
    [0, Math.PI / 2, (3 * Math.PI) / 2],
    [0, Math.PI, 0],
    [0, Math.PI, Math.PI / 2],
    [0, Math.PI, Math.PI],
    [0, Math.PI, (3 * Math.PI) / 2],
    [0, (3 * Math.PI) / 2, 0],
    [0, (3 * Math.PI) / 2, Math.PI / 2],
    [0, (3 * Math.PI) / 2, Math.PI],
    [0, (3 * Math.PI) / 2, (3 * Math.PI) / 2],
    [Math.PI / 2, 0, 0],
    [Math.PI / 2, 0, Math.PI / 2],
    [Math.PI / 2, 0, Math.PI],
    [Math.PI / 2, 0, (3 * Math.PI) / 2],
    [Math.PI / 2, Math.PI, 0],
    [Math.PI / 2, Math.PI, Math.PI / 2],
    [Math.PI / 2, Math.PI, Math.PI],
    [Math.PI / 2, Math.PI, (3 * Math.PI) / 2],
  ];

  static rotationProductTable = [
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],
    [1, 2, 3, 0, 23, 20, 21, 22, 11, 8, 9, 10, 17, 18, 19, 16, 5, 6, 7, 4, 15, 12, 13, 14],
    [2, 3, 0, 1, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 20, 21, 22, 23, 16, 17, 18, 19],
    [3, 0, 1, 2, 19, 16, 17, 18, 9, 10, 11, 8, 21, 22, 23, 20, 15, 12, 13, 14, 5, 6, 7, 4],
    [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 19, 16, 17, 18, 21, 22, 23, 20],
    [5, 6, 7, 4, 20, 21, 22, 23, 15, 12, 13, 14, 16, 17, 18, 19, 9, 10, 11, 8, 3, 0, 1, 2],
    [6, 7, 4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 10, 11, 8, 9, 21, 22, 23, 20, 19, 16, 17, 18],
    [7, 4, 5, 6, 18, 19, 16, 17, 13, 14, 15, 12, 22, 23, 20, 21, 3, 0, 1, 2, 9, 10, 11, 8],
    [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 18, 19, 16, 17, 22, 23, 20, 21],
    [9, 10, 11, 8, 21, 22, 23, 20, 3, 0, 1, 2, 19, 16, 17, 18, 13, 14, 15, 12, 7, 4, 5, 6],
    [10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 22, 23, 20, 21, 18, 19, 16, 17],
    [11, 8, 9, 10, 17, 18, 19, 16, 1, 2, 3, 0, 23, 20, 21, 22, 7, 4, 5, 6, 13, 14, 15, 12],
    [12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 16, 23, 20, 21, 22],
    [13, 14, 15, 12, 22, 23, 20, 21, 7, 4, 5, 6, 18, 19, 16, 17, 1, 2, 3, 0, 11, 8, 9, 10],
    [14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1, 23, 20, 21, 22, 17, 18, 19, 16],
    [15, 12, 13, 14, 16, 17, 18, 19, 5, 6, 7, 4, 20, 21, 22, 23, 11, 8, 9, 10, 1, 2, 3, 0],
    [16, 17, 18, 19, 5, 6, 7, 4, 20, 21, 22, 23, 15, 12, 13, 14, 10, 11, 8, 9, 2, 3, 0, 1],
    [17, 18, 19, 16, 1, 2, 3, 0, 23, 20, 21, 22, 11, 8, 9, 10, 6, 7, 4, 5, 14, 15, 12, 13],
    [18, 19, 16, 17, 13, 14, 15, 12, 22, 23, 20, 21, 7, 4, 5, 6, 2, 3, 0, 1, 10, 11, 8, 9],
    [19, 16, 17, 18, 9, 10, 11, 8, 21, 22, 23, 20, 3, 0, 1, 2, 14, 15, 12, 13, 6, 7, 4, 5],
    [20, 21, 22, 23, 15, 12, 13, 14, 16, 17, 18, 19, 5, 6, 7, 4, 8, 9, 10, 11, 0, 1, 2, 3],
    [21, 22, 23, 20, 3, 0, 1, 2, 19, 16, 17, 18, 9, 10, 11, 8, 12, 13, 14, 15, 4, 5, 6, 7],
    [22, 23, 20, 21, 7, 4, 5, 6, 18, 19, 16, 17, 13, 14, 15, 12, 0, 1, 2, 3, 8, 9, 10, 11],
    [23, 20, 21, 22, 11, 8, 9, 10, 17, 18, 19, 16, 1, 2, 3, 0, 4, 5, 6, 7, 12, 13, 14, 15],
  ];

  static greekAlphabet = "αβγδϵζηθικλμνξοπρστυϕχψω";
}

export default CubeRotation;
